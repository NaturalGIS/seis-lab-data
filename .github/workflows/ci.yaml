name: Continuous Integration

on:
  # will run both when pushing a branch and when pushing a tag
  push:

  pull_request:


env:
  COLUMNS: 120
  PUBLISH_IMAGE: ${{ (github.ref_name == 'main' || github.ref_type == 'tag') && 'TRUE' || 'FALSE'}}
  IMAGE_TAG: ${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
  IMAGE_NAME: ghcr.io/${{ github.repository }}/${{ github.event.repository.name }}

jobs:
  run_ci:
    runs-on: ubuntu-24.04
    steps:
      - name: "Grab code"
        uses: actions/checkout@v4.2.2

      - name: "Install uv"
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.18"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: "Install code with dev dependencies"
        run: uv sync --frozen --group dev

      - name: "Run ruff linter"
        run: uv run ruff check

      - name: "Run ruff formatter"
        run: uv run ruff format --check

      - name: "Determine docker-related metadata"
        id: docker_metadata
        uses: docker/metadata-action@v5.7.0
        with:
          images: ghcr.io/${{ github.repository }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: "check generated docker metadata"
        run: |
          env | grep DOCKER_METADATA_OUTPUT
          echo 'OUTPUT LABELS = ${{ steps.docker_metadata.outputs.labels }}'
          echo 'OUTPUT TAGS = ${{ steps.docker_metadata.outputs.tags }}'
          echo 'OUTPUT ANNOTATIONS = ${{ steps.docker_metadata.outputs.annotations}}'

      - name: "Setup docker buildx"
        uses: docker/setup-buildx-action@v3

      - name: "Build docker image"
        uses: docker/build-push-action@v6
        with:
          build-args: |
            GIT_COMMIT="${{ github.sha }}"
          push: false
          load: true
          file: docker/Dockerfile
          tags: |
            ${{ steps.docker_metadata.outputs.tags }}
          labels: |
            ${{ steps.docker_metadata.outputs.labels }}

      - name: "Run tests"
        run: |
          docker run --rm --entrypoint bash \
          ${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }} -c \
          "uv sync --locked --group dev --group gdal && uv run pytest"

      - name: "Stand up compose stack"
        run: |
          IMAGE_URL=${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }} \
          docker compose --file docker/compose.ci.yaml up --detach

      - name: "Bootstrap stack"
        env:
            IMAGE_URL: ${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }}
        run: |
          docker compose --file docker/compose.ci.yaml exec -t webapp uv run seis-lab-data db upgrade
          docker compose --file docker/compose.ci.yaml exec -t webapp uv run seis-lab-data bootstrap all

      - name: "Run integration tests"
        run: |
          IMAGE_URL=${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }} \
          docker compose --file docker/compose.ci.yaml exec -t webapp bash -c \
          "uv sync --locked --group dev --group gdal && uv run pytest -m integration"

      - name: "Run end to end tests"
        run: |
          uv run playwright install --with-deps --only-shell chromium
          uv run pytest --config-file tests/e2e/conftest.py \
          tests/e2e \
          --user-email akadmin@email.com \
          --user-password admin123 \
          --base-url http://localhost:8888 \
          --tracing retain-on-failure

      - name: "store e2e testing traces as artifacts"
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-traces
          path: test-results/

      - name: "Stand down compose stack"
        run: |
          IMAGE_URL=${{ fromJSON(steps.docker_metadata.outputs.json).tags[0] }} \
          docker compose --file docker/compose.ci.yaml down

      - name: "Login to container registry"
        if: ${{ env.PUBLISH_IMAGE == 'TRUE' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.CI_MANAGEMENT_USERNAME }}
          password: ${{ secrets.CI_MANAGEMENT_PAT }}

      - name: "Push docker image to registry"
        if: ${{ env.PUBLISH_IMAGE == 'TRUE' }}
        uses: docker/build-push-action@v6
        with:
          push: true
          file: docker/Dockerfile
          tags: |
            ${{ steps.docker_metadata.outputs.tags }}
