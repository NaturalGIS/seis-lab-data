import alembic.command
import alembic.config
import typer

from seis_lab_data.config import SeisLabDataCliContext

app = typer.Typer()


class SeisLabDataDbCliContext(SeisLabDataCliContext):
    alembic_config: alembic.config.Config


@app.callback()
def db_app_callback(ctx: typer.Context) -> None:
    """Manage SeisLabData database."""
    context: SeisLabDataCliContext = ctx.obj
    alembic_config = alembic.config.Config()
    alembic_config.set_main_option("script_location", "seis_lab_data:migrations")
    ctx.obj = {
        "main": context,
        "db_app": SeisLabDataDbCliContext(alembic_config=alembic_config),
    }


@app.command(name="check-for-changes")
def check_for_changes(ctx: typer.Context):
    """Look for changes in the DB schema.

    This command checks if there are changes to the schema that warrant the
    generation of new migration files.
    """
    alembic.command.check(ctx.obj["db_app"].alembic_config)


@app.command(name="generate-migration")
def generate_migration(ctx: typer.Context, migration_message: str):
    """Generate migration files with any new database schema changes.

    Remember to inspect the autogenerated migration files in order to determine
    whether they correctly capture the changes in the code.
    """
    alembic.command.revision(
        ctx.obj["db_app"].alembic_config,
        message=migration_message,
        autogenerate=True,
    )


@app.command(name="upgrade")
def upgrade_db(ctx: typer.Context, revision_identifier: str | None = None) -> None:
    """Apply any pending migration files."""
    print("Upgrading database...")
    revision_arg = "head" if revision_identifier is None else revision_identifier
    alembic.command.upgrade(ctx.obj["db_app"].alembic_config, revision_arg)
    print("Done!")
