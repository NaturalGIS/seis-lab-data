when:
  - event: deployment

steps:
  - name: greet
    image: ubuntu:24.04
    commands: |
      echo "Hello World, I would be running as the actual deployment but instead I'm here to show the current env"
      env

  - name: extract-deployment-payload
    image: leplusorg/json:sha-0b8b943
    commands: |
      DEPLOYMENT_JSON=$(curl --silent "${CI_PIPELINE_FORGE_URL}")
      IMAGE_URL=$(echo "$${DEPLOYMENT_JSON}" | jq --raw-output '.payload.image_url')
      ENVIRONMENT=$(echo "$$DEPLOYMENT_JSON" | jq --raw-output '.environment // "not_found"')
      if [ "$${IMAGE_URL}" = "null" ]; then
        echo "Image URL not found in the deployment payload, skipping..."
        echo "SKIP_DEPLOYMENT=true" >> envvars
        exit 0
      fi
      echo "IMAGE_URL=$${IMAGE_URL}" > envvars
      echo "DEPLOY_ENVIRONMENT=$${ENVIRONMENT}" >> envvars

  - name: deploy compose stack
    image: docker:24-cli
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/seis-lab-data:/opt/seis-lab-data
    environment:
      GITHUB_USER:
        from_secret: github_user
      GITHUB_PAT:
        from_secret: github_pat
    commands: |
      echo "=== Checking Prerequisites ==="
      . envvars
      export IMAGE_URL=$${IMAGE_URL}
      
      if [ "$${SKIP_DEPLOYMENT}" = "true" ]; then
        echo "Skipping deployment - no image URL in deployment payload"
        exit 0
      fi
      if [ "$${DEPLOY_ENVIRONMENT}" != "naturalgis-test" ]; then
        echo "Skipping deployment - DEPLOY_ENVIRONMENT variable does not match expected value"
        exit 0
      fi
      
      echo "=== Deploying Application ==="
      apk add --no-cache git
      echo "Cloning repository..."
      git clone https://github.com/NaturalGIS/seis-lab-data.git /tmp/repo
      cd /tmp/repo
      git checkout ${CI_COMMIT_SHA}
      
      # Get target user/group from host directory - assumes directory already owned by correct user
      TARGET_UID=$(stat -c '%u' /opt/seis-lab-data)
      TARGET_GID=$(stat -c '%g' /opt/seis-lab-data)
      
      echo "Target directory ownership: UID=$TARGET_UID, GID=$TARGET_GID"
      
      COMPOSE_FILE_NAME="compose.test-env.yaml"
      LOG_FILE_NAME="dev-log-config.yml"
      ENV_FILE_NAME="compose-deployment.env"
      DEPLOYMENT_DIR="/opt/seis-lab-data"

      echo "Copying files to host"
      cp docker/$${COMPOSE_FILE_NAME} $${DEPLOYMENT_DIR}
      chown $${TARGET_UID}:$${TARGET_GID} $${DEPLOYMENT_DIR}/$${COMPOSE_FILE_NAME}
      cp $${LOG_FILE_NAME} $${DEPLOYMENT_DIR}
      chown $${TARGET_UID}:$${TARGET_GID} $${DEPLOYMENT_DIR}/$${LOG_FILE_NAME}

      if [ ! -f $${DEPLOYMENT_DIR}/$${ENV_FILE_NAME} ]; then
        echo "ERROR: env file not found at $${DEPLOYMENT_DIR}/$${ENV_FILE_NAME}"
        echo "Please ensure the environment file is present on the host"
        exit 1
      fi

      cd $${DEPLOYMENT_DIR}
      echo "Files in deployment directory:"
      ls -la
      
      echo "Logging in to docker registry"
      echo $${GITHUB_PAT} | docker login ghcr.io --username $${GITHUB_USER} --password-stdin

      echo "Pulling latest image: $${IMAGE_URL}"
      docker pull $${IMAGE_URL}

      echo "Stopping existing containers..."
      docker-compose \
        --env-file $${ENV_FILE_NAME} \
        --file $${COMPOSE_FILE_NAME} \
        down || true

      echo "Starting deployment..."
      docker-compose \
        --env-file $${ENV_FILE_NAME} \
        --file $${COMPOSE_FILE_NAME} \
        up --detach
